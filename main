/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hangman;

import java.util.Scanner;
import java.awt.*;      
import java.awt.event.*;
import javax.swing.*;
import static javax.swing.JFrame.EXIT_ON_CLOSE;


class CGTemplate extends JFrame {
   // Define constants
   public static final int CANVAS_WIDTH  = 640;
   public static final int CANVAS_HEIGHT = 480;
 
   private DrawCanvas canvas;
 
   // Canvas
   public CGTemplate() {
      canvas = new DrawCanvas();
      canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
 
      Container cp = getContentPane();
      cp.add(canvas);

 
      setDefaultCloseOperation(EXIT_ON_CLOSE);
      pack();
      setTitle("......");
      setVisible(true);
   }
 
  
   private class DrawCanvas extends JPanel {

      @Override
      public void paintComponent(Graphics g) {
         super.paintComponent(g);
         setBackground(Color.BLACK); //background
 
  
         // Drawing body
         g.setColor(Color.YELLOW);
         g.drawLine(300, 350, 300, 150); //body
         g.fillOval(250, 100, 100, 100); //head
         g.drawLine(300, 260, 200, 150); //arm L
         g.drawLine(300, 260, 400, 150); //arm R
         g.drawLine(300, 350, 400, 400); //FOOT R
         g.drawLine(300, 350, 200, 400); //FOOT L
         // Printing title
         g.setColor(Color.WHITE);
         g.setFont(new Font("Monospaced", Font.PLAIN, 50));
         g.drawString("Hangman.", 10, 40);
      }
   }

   // The entry main method
   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         @Override
         public void run() {
            new CGTemplate();
         }
      });
   }
}
//count spaces in a word

                     
/**
 *
 * @author ocdsb
 */
public class Hangman {
    

    /**
     * @param args the command line arguments
     */
    static String [] easy_words = {"fault", "juicy", "klutz"};
    static String [] medium_words = {"kickbox", "jukebox", "Musical"};
    static String [] hard_words = {"abolished", "lakefront", "taborines"};
    int mistakes = 0;
    static char letter;
    static int position;
    static String word;
    static
    char [] easy_spaces = {'_','_','_','_','_'};
    
    
    
   
    public String randomWord(String [] word_list){
        word = word_list[(int) (Math.random() * word_list.length)];
        return word;
    }
   
    public char guess_value(){
        Scanner letter_input = new Scanner(System.in);
        System.out.println("Guess a letter");
        letter = letter_input.next().charAt(0);
        return letter;     
    }
   
    public int letter_position(char guess){
        position = word.indexOf(guess);
        return position;
    }

   
    public void replace_letters(){
        easy_spaces[position] = letter;
        word = String.valueOf(easy_spaces);
        System.out.println(word);
    }

   
    @SuppressWarnings("empty-statement")
    public static void main(String[] args) {
       
        System.out.println("Welcome to HANGMAN, [1] or [2] Players?");
        Scanner player_input = new Scanner(System.in);
        int player_num = player_input.nextInt();
       
        if (player_num == 1){
            int mistakes = 0;
            Scanner category_input = new Scanner(System.in);
            System.out.println("Choose a difficulty level(easy/medium/hard)");
            String category = category_input.nextLine();
           
           
            if("easy".equalsIgnoreCase(category)){
             
                    Hangman easy = new Hangman();
                    System.out.println(easy.randomWord(easy_words));

                    System.out.println(easy_spaces);
                    
                    while (mistakes < 6 /*&& easy_spaces.contains("_")*/) {
                        easy.guess_value();
                        easy.letter_position(letter);
                        easy.replace_letters();
                    }
            }

            else if("medium".equalsIgnoreCase(category)){
                while (mistakes < 6);
                Hangman medium = new Hangman();
                medium.randomWord(medium_words);
                for(int i=1 ; i<=7 ; i++){
                    System.out.print("__ ");
                }
                //medium.getvalue()
                }
            
            else if("hard".equalsIgnoreCase(category)){
                while (mistakes < 6);
                Hangman hard = new Hangman();
                hard.randomWord(hard_words);
                for(int i=1 ; i<=9 ; i++){
                    System.out.print("__ ");
                }
            }
  

    else if(player_num == 2){
            Player2 player_2 = new Player2();
            player_2.getWord();
            //call spaces for player 2 method (parameter word)
            System.out.println("Hand over computer to player 2");
            player_2.guess_value();
        }
    }
}
    



                    public void paintComponent(Graphics g) {
                        if (mistakes == 1) {
                         g.setColor(Color.BLACK);
                         g.drawLine(300, 350, 200, 400); //FOOT L
                        }
                        
                        else if (mistakes == 2) {
                         g.setColor(Color.BLACK);
                         g.drawLine(300, 350, 400, 400); //FOOT R 
                        }
                         
                        else if (mistakes == 3) {
                         g.setColor(Color.BLACK);
                         g.drawLine(300, 260, 400, 150); //arm R
                         }
                         
                        else if (mistakes == 4) {
                         g.setColor(Color.BLACK);
                         g.drawLine(300, 260, 200, 150); //arm L
                         }
                         
                        else if (mistakes == 5) {
                         g.setColor(Color.BLACK);
                         g.drawLine(300, 350, 300, 150); //body
                         }
                         
                        else if (mistakes == 6); {
                         g.setColor(Color.BLACK);
                         g.fillOval(250, 100, 100, 100);
                        System.out.println("You lose!");     
                    }
                    }
}
