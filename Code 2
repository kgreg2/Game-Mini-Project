////////////////////////////////////////////////////////////////////////////////////////////
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hangman;

import java.util.InputMismatchException;
import java.util.Scanner;
import java.lang.RuntimeException;
import java.awt.*;      
import java.awt.event.*;
import javax.swing.*;


/**
 *
 * @author ocdsb
 */
public class Hangman {

    /**
     * @param args the command line arguments
     */
    static String [] easy_words = {"fault", "stars", "books"};
    static String [] medium_words = {"jacuzzi", "jukebox", "grizzly"};
    static String [] hard_words = {"brilliant", "blackjack", "zigzagged"};
    int mistakes = 0;
    
  //GET VALUE
    public String getvalue(String userinput){ 
        Scanner input = new Scanner(System.in);
        String val;
        System.out.print ("please enter a letter");
        val = input.next();
        return val;
    }
  //COUNT LETTERS
   public int countletters (){
   String str = "a string";
   int length = str.length( );
   int charCount = 0;
   char temp;
   for( int i = 0; i < str.length( ); i++ )
{
    temp = str.charAt( i );

    if( temp.TestCase )
        charCount++;
    return i;
}
   } 
//GET WORD
public String getword(String userinput){ 
    try {
    Scanner input = new Scanner(System.in);
    String twopword;
    System.out.print ("Enter a word for the player to guess:");
    twopword = input.next();
        return twopword;
    }
    catch (runtimeexception twopword){
        system.out.printin ("you cannot have spaces and or be blank");
    }
        return null;
        
    
}
  //RANDOM WORD
    public String randomWord(String [] word_list){
        String word;
        word = word_list[(int) (Math.random() * word_list.length)];
        return word;
    }
 //EXCEPTION
public Hangman(String twopword){
    if(twopword == null || twopword.isEmpty()){
        throw new RuntimeException("Cannot have spaces and or be blank!");
                
}}
//GRAPHICS
public class Hangman extends JFrame {
   // Define constants
   public static final int CANVAS_WIDTH  = 640;
   public static final int CANVAS_HEIGHT = 480;
 
   private DrawCanvas canvas;
 
   // Canvas
   public Hangman() {
      canvas = new DrawCanvas();
      canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
 
      Container cp = getContentPane();
      cp.add(canvas);

 
      setDefaultCloseOperation(EXIT_ON_CLOSE);
      pack();
      setTitle("......");
      setVisible(true);
   }
 
  
   private class DrawCanvas extends JPanel {

      @Override
      public void paintComponent(Graphics g) {
         super.paintComponent(g);
         setBackground(Color.BLACK); //background
 
  
         // Drawing body
         g.setColor(Color.YELLOW);
         g.drawLine(300, 350, 300, 150); //body
         g.fillOval(250, 100, 100, 100); //head
         g.drawLine(300, 260, 200, 150); //arm L
         g.drawLine(300, 260, 400, 150); //arm R
         g.drawLine(300, 350, 400, 400); //FOOT R
         g.drawLine(300, 350, 200, 400); //FOOT L
         // Printing title
         g.setColor(Color.WHITE);
         g.setFont(new Font("Monospaced", Font.PLAIN, 50));
         g.drawString("Hangman.", 10, 40);
      }
   }
}/**/}

   
   
   
   
   
   // COUNT LETTERS
   public void countletters (){
   String word = null;
   String str = word;
int length = str.length( );
   }
//count spaces in a word
  //MAIN
    public static void main(String[] args) {
        
        System.out.println("Welcome to HANGMAN, [1] or [2] Players?");
        Scanner player_input = new Scanner(System.in);
        int player_num = player_input.nextInt();
        
        if (player_num == 1){
            Scanner category_input = new Scanner(System.in);
            System.out.println("Choose a difficulty level(easy/medium/hard)");
            String category = category_input.nextLine();
            if("easy".equalsIgnoreCase(category)){
                Hangman easy = new Hangman();
                System.out.println((easy.randomWord(easy_words)));
                for(int i=1 ; i<=5 ; i++){
                    System.out.print("__ ");
                }
                //easy.userInput()
            }
            else if("medium".equalsIgnoreCase(category)){
                Hangman medium = new Hangman();
                System.out.println(medium.randomWord(medium_words));
                for(int i=1 ; i<=7 ; i++){
                    System.out.print("__ ");
                }
                //medium.userInput()
                }
            else if("hard".equalsIgnoreCase(category)){
                Hangman hard = new Hangman();
                System.out.println(hard.randomWord(hard_words));
                for(int i=1 ; i<=9 ; i++){
                    System.out.print("__ ");
                }
                /1/hard.getvalue();
                }
            else{
                //call exception method
            }
 
     1   }
        else if(player_num == 2){
            Player2 player_2 = new Player2();
            getword ();
            System.out.println("Hand over computer to player 2");
            getvalue ();
            player_2.testMethod();
        }
    }

    }
//////////////////////////////////////////////////////////////////////////////////
